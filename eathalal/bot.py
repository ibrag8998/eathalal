import os

from aiogram import Bot, Dispatcher, types

from eathalal.animal_data import animals

token = os.environ.get('BOT_TOKEN').strip()
if not token:
    raise EnvironmentError("You must provide `BOT_TOKEN` environment variable.")

bot = Bot(token)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def on_start(message: types.Message):
    await message.answer(
        '–ê—Å-—Å–∞–ª—è–º—É \'–∞–ª–µ–π–∫—É–º –≤–∞ —Ä–∞—Ö–º–∞—Ç—É –õ–ª–∞—Ö–∏ –≤–∞ –±–∞—Ä–∞–∫–∞—Ç—É—Ö!\n\n'
        '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, —Ç–æ–ª—å–∫–æ –±–µ–∑ –æ—à–∏–±–æ–∫. üòÖ'
    )


@dp.message_handler()
async def on_query(message: types.Message):
    results_count = 0

    for animal in animals.search(message.text):
        results_count += 1

        if animal.is_halal is True:
            rule_text = '<b>–¥–∞</b>. ‚úÖ'
        elif animal.is_halal is False:
            rule_text = '<b>–Ω–µ—Ç</b>. ‚ùå'
        else:  # can be None
            rule_text = '<b>—Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è.</b> ‚ùì'

        await message.reply((
            f"–ñ–∏–≤–æ—Ç–Ω–æ–µ: <b>{animal.name}</b>.\n"
            f"–î–æ–∑–≤–æ–ª–µ–Ω–æ –≤ –ø–∏—â—É: {rule_text}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>{animal.comment.rstrip('.')}</i>."
        ), parse_mode='HTML')

        if results_count >= 3:
            break

    if results_count == 0:
        await message.reply('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...')
